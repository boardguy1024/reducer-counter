{"ast":null,"code":"import _defineProperty from \"/Users/parkkyungsuk/Documents/GitHub/react-course/redux-counter-sample/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nconst INITIAL_STATE = {\n  number: 0,\n  color: \"black\"\n};\n\nfunction countReducer(state = INITIAL_STATE, action) {\n  switch (action.type) {\n    case \"INCREMENT\":\n      return _objectSpread({}, state, {\n        number: state.number + 1\n      });\n\n    case \"DECREMENT\":\n      return _objectSpread({}, state, {\n        number: state.number - 1\n      });\n\n    default:\n      return state;\n  }\n}\n\nexport default countReducer;","map":{"version":3,"sources":["/Users/parkkyungsuk/Documents/GitHub/react-course/redux-counter-sample/src/reducers/reducers.js"],"names":["INITIAL_STATE","number","color","countReducer","state","action","type"],"mappings":";;;;;;AAAA,MAAMA,aAAa,GAAG;AACpBC,EAAAA,MAAM,EAAE,CADY;AAEpBC,EAAAA,KAAK,EAAE;AAFa,CAAtB;;AAIA,SAASC,YAAT,CAAsBC,KAAK,GAAGJ,aAA9B,EAA6CK,MAA7C,EAAqD;AACnD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,WAAL;AACE,+BACKF,KADL;AAEEH,QAAAA,MAAM,EAAEG,KAAK,CAACH,MAAN,GAAe;AAFzB;;AAIF,SAAK,WAAL;AACE,+BACKG,KADL;AAEEH,QAAAA,MAAM,EAAEG,KAAK,CAACH,MAAN,GAAe;AAFzB;;AAIF;AACE,aAAOG,KAAP;AAZJ;AAcD;;AAED,eAAeD,YAAf","sourcesContent":["const INITIAL_STATE = {\n  number: 0,\n  color: \"black\"\n};\nfunction countReducer(state = INITIAL_STATE, action) {\n  switch (action.type) {\n    case \"INCREMENT\":\n      return {\n        ...state,\n        number: state.number + 1\n      };\n    case \"DECREMENT\":\n      return {\n        ...state,\n        number: state.number - 1\n      };\n    default:\n      return state;\n  }\n}\n\nexport default countReducer;\n"]},"metadata":{},"sourceType":"module"}