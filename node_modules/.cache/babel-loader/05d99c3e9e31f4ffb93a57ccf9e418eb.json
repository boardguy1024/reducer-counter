{"ast":null,"code":"import * as types from \"../actions/ActionTypes\";\nimport { Map, List } from \"immutable\";\nconst INITIAL_STATE = Map({\n  counters: List([Map({\n    color: \"black\",\n    number: 0\n  })])\n});\n\nfunction counter(state = INITIAL_STATE, action) {\n  // const { counters } = state;\n  const counters = state.get(\"counters\");\n\n  switch (action.type) {\n    case types.CREATE:\n      return state.set(\"counters\", counters.push(Map({\n        color: action.color,\n        number: 0\n      })));\n\n    case types.REMOVE:\n      return state.set(\"counters\", counters.pop());\n\n    case types.INCREMENT:\n      return state.set(\"counters\", counters.update(action.index, counter => counter.set(\"number\", counter.get(\"number\") + 1)));\n\n    case types.DECREMENT:\n      return state.set(\"counters\", counters.update(action.index, counter => counter.set(\"number\", counter.get(\"number\") - 1)));\n\n    case types.SET_COLOR:\n      return state.set(\"counters\", counters.update(action.index, counter => counter.set(\"color\", action.color)));\n\n    default:\n      return state;\n  }\n}\n\nexport default counter;","map":{"version":3,"sources":["/Users/parkkyungsuk/Documents/GitHub/react-course/redux-counter/src/reducers/reducers.js"],"names":["types","Map","List","INITIAL_STATE","counters","color","number","counter","state","action","get","type","CREATE","set","push","REMOVE","pop","INCREMENT","update","index","DECREMENT","SET_COLOR"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,wBAAvB;AAEA,SAASC,GAAT,EAAcC,IAAd,QAA0B,WAA1B;AAEA,MAAMC,aAAa,GAAGF,GAAG,CAAC;AACxBG,EAAAA,QAAQ,EAAEF,IAAI,CAAC,CACbD,GAAG,CAAC;AACFI,IAAAA,KAAK,EAAE,OADL;AAEFC,IAAAA,MAAM,EAAE;AAFN,GAAD,CADU,CAAD;AADU,CAAD,CAAzB;;AASA,SAASC,OAAT,CAAiBC,KAAK,GAAGL,aAAzB,EAAwCM,MAAxC,EAAgD;AAC9C;AACA,QAAML,QAAQ,GAAGI,KAAK,CAACE,GAAN,CAAU,UAAV,CAAjB;;AAEA,UAAQD,MAAM,CAACE,IAAf;AACE,SAAKX,KAAK,CAACY,MAAX;AACE,aAAOJ,KAAK,CAACK,GAAN,CACL,UADK,EAELT,QAAQ,CAACU,IAAT,CACEb,GAAG,CAAC;AACFI,QAAAA,KAAK,EAAEI,MAAM,CAACJ,KADZ;AAEFC,QAAAA,MAAM,EAAE;AAFN,OAAD,CADL,CAFK,CAAP;;AAUF,SAAKN,KAAK,CAACe,MAAX;AACE,aAAOP,KAAK,CAACK,GAAN,CAAU,UAAV,EAAsBT,QAAQ,CAACY,GAAT,EAAtB,CAAP;;AAEF,SAAKhB,KAAK,CAACiB,SAAX;AACE,aAAOT,KAAK,CAACK,GAAN,CACL,UADK,EAELT,QAAQ,CAACc,MAAT,CAAgBT,MAAM,CAACU,KAAvB,EAA8BZ,OAAO,IACnCA,OAAO,CAACM,GAAR,CAAY,QAAZ,EAAsBN,OAAO,CAACG,GAAR,CAAY,QAAZ,IAAwB,CAA9C,CADF,CAFK,CAAP;;AAOF,SAAKV,KAAK,CAACoB,SAAX;AACE,aAAOZ,KAAK,CAACK,GAAN,CACL,UADK,EAELT,QAAQ,CAACc,MAAT,CAAgBT,MAAM,CAACU,KAAvB,EAA8BZ,OAAO,IACnCA,OAAO,CAACM,GAAR,CAAY,QAAZ,EAAsBN,OAAO,CAACG,GAAR,CAAY,QAAZ,IAAwB,CAA9C,CADF,CAFK,CAAP;;AAMF,SAAKV,KAAK,CAACqB,SAAX;AACE,aAAOb,KAAK,CAACK,GAAN,CACL,UADK,EAELT,QAAQ,CAACc,MAAT,CAAgBT,MAAM,CAACU,KAAvB,EAA8BZ,OAAO,IACnCA,OAAO,CAACM,GAAR,CAAY,OAAZ,EAAqBJ,MAAM,CAACJ,KAA5B,CADF,CAFK,CAAP;;AAMF;AACE,aAAOG,KAAP;AAtCJ;AAwCD;;AAED,eAAeD,OAAf","sourcesContent":["import * as types from \"../actions/ActionTypes\";\n\nimport { Map, List } from \"immutable\";\n\nconst INITIAL_STATE = Map({\n  counters: List([\n    Map({\n      color: \"black\",\n      number: 0\n    })\n  ])\n});\n\nfunction counter(state = INITIAL_STATE, action) {\n  // const { counters } = state;\n  const counters = state.get(\"counters\");\n\n  switch (action.type) {\n    case types.CREATE:\n      return state.set(\n        \"counters\",\n        counters.push(\n          Map({\n            color: action.color,\n            number: 0\n          })\n        )\n      );\n\n    case types.REMOVE:\n      return state.set(\"counters\", counters.pop());\n\n    case types.INCREMENT:\n      return state.set(\n        \"counters\",\n        counters.update(action.index, counter =>\n          counter.set(\"number\", counter.get(\"number\") + 1)\n        )\n      );\n\n    case types.DECREMENT:\n      return state.set(\n        \"counters\",\n        counters.update(action.index, counter =>\n          counter.set(\"number\", counter.get(\"number\") - 1)\n        )\n      );\n    case types.SET_COLOR:\n      return state.set(\n        \"counters\",\n        counters.update(action.index, counter =>\n          counter.set(\"color\", action.color)\n        )\n      );\n    default:\n      return state;\n  }\n}\n\nexport default counter;\n"]},"metadata":{},"sourceType":"module"}