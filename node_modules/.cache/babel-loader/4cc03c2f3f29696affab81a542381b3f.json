{"ast":null,"code":"import _defineProperty from \"/Users/parkkyungsuk/Documents/GitHub/react-course/redux-counter/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as types from \"../actions/ActionTypes\";\nconst INITIAL_STATE = {\n  counters: [{\n    color: \"black\",\n    number: 0\n  }]\n};\n\nfunction counter(state = INITIAL_STATE, action) {\n  switch (action.type) {\n    case types.CREATE:\n      return {\n        counters: [...state.counters, {\n          color: action.color,\n          number: 0\n        }]\n      };\n\n    case types.REMOVE:\n      return {\n        counters: state.counters.slice(0, state.counters.length - 1)\n      };\n\n    case types.INCREMENT:\n      return {\n        counters: [// 0 ~ action.index 사이의 아이템들을 잘라와서 이 자리에 넣는다.\n        ...state.counters.slice(0, action.index), _objectSpread({}, state.counters[action.index], {\n          // 기존 값은 유지하면서\n          number: state.counters[action.index].number + 1 // number 값을 덮어쓴다.\n\n        }), // 마지막으로 index 뒤의 데이터들을 추가해준다.\n        ...state.counters.slice(action.index + 1, state.counters.length)]\n      };\n\n    case types.DECREMENT:\n      return {\n        counters: [...state.counters.slice(0, action.index), _objectSpread({}, state.counters[action.index], {\n          number: state.counters[action.index].number - 1\n        }), ...state.counters.slice(action.index + 1, state.counters.length)]\n      };\n\n    case types.SET_COLOR:\n      return {\n        counters: [...state.counters.slice(0, action.index), _objectSpread({}, state.counters[action.index], {\n          color: action.color\n        }), ...state.counters.slice(action.index + 1, state.counters.length)]\n      };\n\n    default:\n      return state;\n  }\n}\n\nexport default counter;","map":{"version":3,"sources":["/Users/parkkyungsuk/Documents/GitHub/react-course/redux-counter/src/reducers/reducers.js"],"names":["types","INITIAL_STATE","counters","color","number","counter","state","action","type","CREATE","REMOVE","slice","length","INCREMENT","index","DECREMENT","SET_COLOR"],"mappings":";;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,wBAAvB;AAEA,MAAMC,aAAa,GAAG;AACpBC,EAAAA,QAAQ,EAAE,CACR;AACEC,IAAAA,KAAK,EAAE,OADT;AAEEC,IAAAA,MAAM,EAAE;AAFV,GADQ;AADU,CAAtB;;AASA,SAASC,OAAT,CAAiBC,KAAK,GAAGL,aAAzB,EAAwCM,MAAxC,EAAgD;AAC9C,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKR,KAAK,CAACS,MAAX;AACE,aAAO;AACLP,QAAAA,QAAQ,EAAE,CACR,GAAGI,KAAK,CAACJ,QADD,EAER;AACEC,UAAAA,KAAK,EAAEI,MAAM,CAACJ,KADhB;AAEEC,UAAAA,MAAM,EAAE;AAFV,SAFQ;AADL,OAAP;;AASF,SAAKJ,KAAK,CAACU,MAAX;AACE,aAAO;AACLR,QAAAA,QAAQ,EAAEI,KAAK,CAACJ,QAAN,CAAeS,KAAf,CAAqB,CAArB,EAAwBL,KAAK,CAACJ,QAAN,CAAeU,MAAf,GAAwB,CAAhD;AADL,OAAP;;AAIF,SAAKZ,KAAK,CAACa,SAAX;AACE,aAAO;AACLX,QAAAA,QAAQ,EAAE,CACR;AACA,WAAGI,KAAK,CAACJ,QAAN,CAAeS,KAAf,CAAqB,CAArB,EAAwBJ,MAAM,CAACO,KAA/B,CAFK,oBAIHR,KAAK,CAACJ,QAAN,CAAeK,MAAM,CAACO,KAAtB,CAJG;AAI2B;AACjCV,UAAAA,MAAM,EAAEE,KAAK,CAACJ,QAAN,CAAeK,MAAM,CAACO,KAAtB,EAA6BV,MAA7B,GAAsC,CALxC,CAK0C;;AAL1C,YAOR;AACA,WAAGE,KAAK,CAACJ,QAAN,CAAeS,KAAf,CAAqBJ,MAAM,CAACO,KAAP,GAAe,CAApC,EAAuCR,KAAK,CAACJ,QAAN,CAAeU,MAAtD,CARK;AADL,OAAP;;AAYF,SAAKZ,KAAK,CAACe,SAAX;AACE,aAAO;AACLb,QAAAA,QAAQ,EAAE,CACR,GAAGI,KAAK,CAACJ,QAAN,CAAeS,KAAf,CAAqB,CAArB,EAAwBJ,MAAM,CAACO,KAA/B,CADK,oBAGHR,KAAK,CAACJ,QAAN,CAAeK,MAAM,CAACO,KAAtB,CAHG;AAINV,UAAAA,MAAM,EAAEE,KAAK,CAACJ,QAAN,CAAeK,MAAM,CAACO,KAAtB,EAA6BV,MAA7B,GAAsC;AAJxC,YAMR,GAAGE,KAAK,CAACJ,QAAN,CAAeS,KAAf,CAAqBJ,MAAM,CAACO,KAAP,GAAe,CAApC,EAAuCR,KAAK,CAACJ,QAAN,CAAeU,MAAtD,CANK;AADL,OAAP;;AAWF,SAAKZ,KAAK,CAACgB,SAAX;AACE,aAAO;AACLd,QAAAA,QAAQ,EAAE,CACR,GAAGI,KAAK,CAACJ,QAAN,CAAeS,KAAf,CAAqB,CAArB,EAAwBJ,MAAM,CAACO,KAA/B,CADK,oBAGHR,KAAK,CAACJ,QAAN,CAAeK,MAAM,CAACO,KAAtB,CAHG;AAINX,UAAAA,KAAK,EAAEI,MAAM,CAACJ;AAJR,YAMR,GAAGG,KAAK,CAACJ,QAAN,CAAeS,KAAf,CAAqBJ,MAAM,CAACO,KAAP,GAAe,CAApC,EAAuCR,KAAK,CAACJ,QAAN,CAAeU,MAAtD,CANK;AADL,OAAP;;AAUF;AACE,aAAON,KAAP;AArDJ;AAuDD;;AAED,eAAeD,OAAf","sourcesContent":["import * as types from \"../actions/ActionTypes\";\n\nconst INITIAL_STATE = {\n  counters: [\n    {\n      color: \"black\",\n      number: 0\n    }\n  ]\n};\n\nfunction counter(state = INITIAL_STATE, action) {\n  switch (action.type) {\n    case types.CREATE:\n      return {\n        counters: [\n          ...state.counters,\n          {\n            color: action.color,\n            number: 0\n          }\n        ]\n      };\n    case types.REMOVE:\n      return {\n        counters: state.counters.slice(0, state.counters.length - 1)\n      };\n\n    case types.INCREMENT:\n      return {\n        counters: [\n          // 0 ~ action.index 사이의 아이템들을 잘라와서 이 자리에 넣는다.\n          ...state.counters.slice(0, action.index),\n          {\n            ...state.counters[action.index], // 기존 값은 유지하면서\n            number: state.counters[action.index].number + 1 // number 값을 덮어쓴다.\n          },\n          // 마지막으로 index 뒤의 데이터들을 추가해준다.\n          ...state.counters.slice(action.index + 1, state.counters.length)\n        ]\n      };\n    case types.DECREMENT:\n      return {\n        counters: [\n          ...state.counters.slice(0, action.index),\n          {\n            ...state.counters[action.index],\n            number: state.counters[action.index].number - 1\n          },\n          ...state.counters.slice(action.index + 1, state.counters.length)\n        ]\n      };\n\n    case types.SET_COLOR:\n      return {\n        counters: [\n          ...state.counters.slice(0, action.index),\n          {\n            ...state.counters[action.index],\n            color: action.color\n          },\n          ...state.counters.slice(action.index + 1, state.counters.length)\n        ]\n      };\n    default:\n      return state;\n  }\n}\n\nexport default counter;\n"]},"metadata":{},"sourceType":"module"}