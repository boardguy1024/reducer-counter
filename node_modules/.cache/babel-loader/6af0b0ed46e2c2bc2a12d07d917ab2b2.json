{"ast":null,"code":"import _defineProperty from \"/Users/parkkyungsuk/Documents/GitHub/react-course/redux-counter/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as types from \"../actions/ActionTypes\";\nconst INITIAL_STATE = {\n  number: 0\n};\n\nconst number = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case types.INCREMENT:\n      return _objectSpread({}, state, {\n        number: state.number + 1\n      });\n\n    case types.DECREMENT:\n      return _objectSpread({}, state, {\n        number: state.number - 1\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default number;","map":{"version":3,"sources":["/Users/parkkyungsuk/Documents/GitHub/react-course/redux-counter/src/reducers/number.js"],"names":["types","INITIAL_STATE","number","state","action","type","INCREMENT","DECREMENT"],"mappings":";;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,wBAAvB;AAEA,MAAMC,aAAa,GAAG;AACpBC,EAAAA,MAAM,EAAE;AADY,CAAtB;;AAIA,MAAMA,MAAM,GAAG,CAACC,KAAK,GAAGF,aAAT,EAAwBG,MAAxB,KAAmC;AAChD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKL,KAAK,CAACM,SAAX;AACE,+BACKH,KADL;AAEED,QAAAA,MAAM,EAAEC,KAAK,CAACD,MAAN,GAAe;AAFzB;;AAIF,SAAKF,KAAK,CAACO,SAAX;AACE,+BACKJ,KADL;AAEED,QAAAA,MAAM,EAAEC,KAAK,CAACD,MAAN,GAAe;AAFzB;;AAIF;AACE,aAAOC,KAAP;AAZJ;AAcD,CAfD;;AAiBA,eAAeD,MAAf","sourcesContent":["import * as types from \"../actions/ActionTypes\";\n\nconst INITIAL_STATE = {\n  number: 0\n};\n\nconst number = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case types.INCREMENT:\n      return {\n        ...state,\n        number: state.number + 1\n      };\n    case types.DECREMENT:\n      return {\n        ...state,\n        number: state.number - 1\n      };\n    default:\n      return state;\n  }\n};\n\nexport default number;\n"]},"metadata":{},"sourceType":"module"}