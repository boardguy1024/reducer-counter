{"ast":null,"code":"import _defineProperty from \"/Users/parkkyungsuk/Documents/GitHub/react-course/redux-counter/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as types from \"../actions/ActionTypes\";\nconst INITIAL_STATE = {\n  counters: [{\n    color: \"black\",\n    number: 0\n  }]\n};\n\nfunction counters(state = INITIAL_STATE, action) {\n  switch (action.type) {\n    case types.CREATE:\n      return {\n        counters: [...counters, {\n          color: action.color,\n          number: 0\n        }]\n      };\n\n    case types.REMOVE:\n      return {\n        counters: counters.slice(0, counters.length - 1)\n      };\n\n    case types.INCREMENT:\n      return _objectSpread({}, counters, {\n        number: counters[action.index].number + 1\n      });\n\n    default:\n      return state;\n  }\n}\n\nexport default counters;","map":{"version":3,"sources":["/Users/parkkyungsuk/Documents/GitHub/react-course/redux-counter/src/reducers/reducers.js"],"names":["types","INITIAL_STATE","counters","color","number","state","action","type","CREATE","REMOVE","slice","length","INCREMENT","index"],"mappings":";;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,wBAAvB;AAEA,MAAMC,aAAa,GAAG;AACpBC,EAAAA,QAAQ,EAAE,CACR;AACEC,IAAAA,KAAK,EAAE,OADT;AAEEC,IAAAA,MAAM,EAAE;AAFV,GADQ;AADU,CAAtB;;AASA,SAASF,QAAT,CAAkBG,KAAK,GAAGJ,aAA1B,EAAyCK,MAAzC,EAAiD;AAC/C,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKP,KAAK,CAACQ,MAAX;AACE,aAAO;AACLN,QAAAA,QAAQ,EAAE,CACR,GAAGA,QADK,EAER;AACEC,UAAAA,KAAK,EAAEG,MAAM,CAACH,KADhB;AAEEC,UAAAA,MAAM,EAAE;AAFV,SAFQ;AADL,OAAP;;AASF,SAAKJ,KAAK,CAACS,MAAX;AACE,aAAO;AACLP,QAAAA,QAAQ,EAAEA,QAAQ,CAACQ,KAAT,CAAe,CAAf,EAAkBR,QAAQ,CAACS,MAAT,GAAkB,CAApC;AADL,OAAP;;AAIF,SAAKX,KAAK,CAACY,SAAX;AACE,+BACKV,QADL;AAEEE,QAAAA,MAAM,EAAEF,QAAQ,CAACI,MAAM,CAACO,KAAR,CAAR,CAAuBT,MAAvB,GAAgC;AAF1C;;AAIF;AACE,aAAOC,KAAP;AAtBJ;AAwBD;;AAED,eAAeH,QAAf","sourcesContent":["import * as types from \"../actions/ActionTypes\";\n\nconst INITIAL_STATE = {\n  counters: [\n    {\n      color: \"black\",\n      number: 0\n    }\n  ]\n};\n\nfunction counters(state = INITIAL_STATE, action) {\n  switch (action.type) {\n    case types.CREATE:\n      return {\n        counters: [\n          ...counters,\n          {\n            color: action.color,\n            number: 0\n          }\n        ]\n      };\n    case types.REMOVE:\n      return {\n        counters: counters.slice(0, counters.length - 1)\n      };\n\n    case types.INCREMENT:\n      return {\n        ...counters,\n        number: counters[action.index].number + 1\n      };\n    default:\n      return state;\n  }\n}\n\nexport default counters;\n"]},"metadata":{},"sourceType":"module"}